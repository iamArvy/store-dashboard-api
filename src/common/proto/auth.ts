// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "auth";

export interface IdInput {
  id: string;
}

export interface Status {
  success: boolean;
}

export interface RegisterData {
  email: string;
  password: string;
}

export interface RegisterRequest {
  data: RegisterData | undefined;
  userAgent: string;
  ipAddress: string;
}

export interface AuthResponse {
  access: AuthToken | undefined;
  refresh: AuthToken | undefined;
}

export interface AuthToken {
  token: string;
  expiresIn: number;
}

export interface ChangePasswordData {
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordRequest {
  id: string;
  data: ChangePasswordData | undefined;
}

export interface RequestPasswordResetMessage {
  id: string;
  email: string;
}

export interface ResetPasswordMessage {
  token: string;
  password: string;
}

export interface EmailData {
  email: string;
}

export interface ChangeEmailRequest {
  id: string;
  data: EmailData | undefined;
}

export interface TokenRequest {
  token: string;
}

export interface IsEmailVerifiedResponse {
  verified: boolean;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface LoginRequest {
  data: LoginData | undefined;
  userAgent: string;
  ipAddress: string;
}

export interface SessionData {
  id: string;
  userAgent: string;
  ipAddress: string;
  createdAt: string;
}

export interface SessionList {
  sessions: SessionData[];
}

export interface CreateRoleInput {
  name: string;
}

export interface UpdateRoleData {
  name: string;
}

export interface UpdateRoleInput {
  id: string;
  data: UpdateRoleData | undefined;
}

export interface RoleData {
  id: string;
  name: string;
}

export interface RoleList {
  roles: RoleData[];
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseIdInput(): IdInput {
  return { id: "" };
}

export const IdInput: MessageFns<IdInput> = {
  encode(message: IdInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseStatus(): Status {
  return { success: false };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegisterData(): RegisterData {
  return { email: "", password: "" };
}

export const RegisterData: MessageFns<RegisterData> = {
  encode(message: RegisterData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { data: undefined, userAgent: "", ipAddress: "" };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RegisterData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RegisterData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { access: undefined, refresh: undefined };
}

export const AuthResponse: MessageFns<AuthResponse> = {
  encode(message: AuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access !== undefined) {
      AuthToken.encode(message.access, writer.uint32(10).fork()).join();
    }
    if (message.refresh !== undefined) {
      AuthToken.encode(message.refresh, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access = AuthToken.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh = AuthToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAuthToken(): AuthToken {
  return { token: "", expiresIn: 0 };
}

export const AuthToken: MessageFns<AuthToken> = {
  encode(message: AuthToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(16).int32(message.expiresIn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordData(): ChangePasswordData {
  return { oldPassword: "", newPassword: "" };
}

export const ChangePasswordData: MessageFns<ChangePasswordData> = {
  encode(message: ChangePasswordData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldPassword !== "") {
      writer.uint32(10).string(message.oldPassword);
    }
    if (message.newPassword !== "") {
      writer.uint32(18).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldPassword = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return { id: "", data: undefined };
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ChangePasswordData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ChangePasswordData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRequestPasswordResetMessage(): RequestPasswordResetMessage {
  return { id: "", email: "" };
}

export const RequestPasswordResetMessage: MessageFns<RequestPasswordResetMessage> = {
  encode(message: RequestPasswordResetMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPasswordResetMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPasswordResetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseResetPasswordMessage(): ResetPasswordMessage {
  return { token: "", password: "" };
}

export const ResetPasswordMessage: MessageFns<ResetPasswordMessage> = {
  encode(message: ResetPasswordMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseEmailData(): EmailData {
  return { email: "" };
}

export const EmailData: MessageFns<EmailData> = {
  encode(message: EmailData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmailData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmailData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangeEmailRequest(): ChangeEmailRequest {
  return { id: "", data: undefined };
}

export const ChangeEmailRequest: MessageFns<ChangeEmailRequest> = {
  encode(message: ChangeEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      EmailData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = EmailData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTokenRequest(): TokenRequest {
  return { token: "" };
}

export const TokenRequest: MessageFns<TokenRequest> = {
  encode(message: TokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseIsEmailVerifiedResponse(): IsEmailVerifiedResponse {
  return { verified: false };
}

export const IsEmailVerifiedResponse: MessageFns<IsEmailVerifiedResponse> = {
  encode(message: IsEmailVerifiedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verified !== false) {
      writer.uint32(8).bool(message.verified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsEmailVerifiedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsEmailVerifiedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginData(): LoginData {
  return { email: "", password: "" };
}

export const LoginData: MessageFns<LoginData> = {
  encode(message: LoginData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { data: undefined, userAgent: "", ipAddress: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LoginData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LoginData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSessionData(): SessionData {
  return { id: "", userAgent: "", ipAddress: "", createdAt: "" };
}

export const SessionData: MessageFns<SessionData> = {
  encode(message: SessionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSessionList(): SessionList {
  return { sessions: [] };
}

export const SessionList: MessageFns<SessionList> = {
  encode(message: SessionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      SessionData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(SessionData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateRoleInput(): CreateRoleInput {
  return { name: "" };
}

export const CreateRoleInput: MessageFns<CreateRoleInput> = {
  encode(message: CreateRoleInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRoleInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRoleInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateRoleData(): UpdateRoleData {
  return { name: "" };
}

export const UpdateRoleData: MessageFns<UpdateRoleData> = {
  encode(message: UpdateRoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateRoleInput(): UpdateRoleInput {
  return { id: "", data: undefined };
}

export const UpdateRoleInput: MessageFns<UpdateRoleInput> = {
  encode(message: UpdateRoleInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      UpdateRoleData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = UpdateRoleData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRoleData(): RoleData {
  return { id: "", name: "" };
}

export const RoleData: MessageFns<RoleData> = {
  encode(message: RoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRoleList(): RoleList {
  return { roles: [] };
}

export const RoleList: MessageFns<RoleList> = {
  encode(message: RoleList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.roles) {
      RoleData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roles.push(RoleData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface AuthServiceClient {
  health(request: Empty): Observable<Status>;

  register(request: RegisterRequest): Observable<AuthResponse>;

  login(request: LoginRequest): Observable<AuthResponse>;

  refreshToken(request: TokenRequest): Observable<AuthToken>;

  logout(request: TokenRequest): Observable<Status>;
}

export interface AuthServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  register(request: RegisterRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  login(request: LoginRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(request: TokenRequest): Promise<AuthToken> | Observable<AuthToken> | AuthToken;

  logout(request: TokenRequest): Promise<Status> | Observable<Status> | Status;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "register", "login", "refreshToken", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  health: {
    path: "/auth.AuthService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  register: {
    path: "/auth.AuthService/Register",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterRequest) => Buffer.from(RegisterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RegisterRequest.decode(value),
    responseSerialize: (value: AuthResponse) => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthResponse.decode(value),
  },
  login: {
    path: "/auth.AuthService/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginRequest) => Buffer.from(LoginRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LoginRequest.decode(value),
    responseSerialize: (value: AuthResponse) => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthResponse.decode(value),
  },
  refreshToken: {
    path: "/auth.AuthService/RefreshToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest) => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TokenRequest.decode(value),
    responseSerialize: (value: AuthToken) => Buffer.from(AuthToken.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthToken.decode(value),
  },
  logout: {
    path: "/auth.AuthService/Logout",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest) => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TokenRequest.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  register: handleUnaryCall<RegisterRequest, AuthResponse>;
  login: handleUnaryCall<LoginRequest, AuthResponse>;
  refreshToken: handleUnaryCall<TokenRequest, AuthToken>;
  logout: handleUnaryCall<TokenRequest, Status>;
}

export interface UserServiceClient {
  health(request: Empty): Observable<Status>;

  changePassword(request: ChangePasswordRequest): Observable<Status>;

  changeEmail(request: ChangeEmailRequest): Observable<Status>;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Observable<Status>;

  resetPassword(request: ResetPasswordMessage): Observable<Status>;

  requestEmailVerification(request: EmailData): Observable<Status>;

  verifyEmail(request: TokenRequest): Observable<Status>;
}

export interface UserServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  changePassword(request: ChangePasswordRequest): Promise<Status> | Observable<Status> | Status;

  changeEmail(request: ChangeEmailRequest): Promise<Status> | Observable<Status> | Status;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Promise<Status> | Observable<Status> | Status;

  resetPassword(request: ResetPasswordMessage): Promise<Status> | Observable<Status> | Status;

  requestEmailVerification(request: EmailData): Promise<Status> | Observable<Status> | Status;

  verifyEmail(request: TokenRequest): Promise<Status> | Observable<Status> | Status;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "health",
      "changePassword",
      "changeEmail",
      "requestPasswordResetToken",
      "resetPassword",
      "requestEmailVerification",
      "verifyEmail",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  health: {
    path: "/auth.UserService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  changePassword: {
    path: "/auth.UserService/ChangePassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangePasswordRequest) => Buffer.from(ChangePasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChangePasswordRequest.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  changeEmail: {
    path: "/auth.UserService/ChangeEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangeEmailRequest) => Buffer.from(ChangeEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChangeEmailRequest.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  requestPasswordResetToken: {
    path: "/auth.UserService/requestPasswordResetToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestPasswordResetMessage) =>
      Buffer.from(RequestPasswordResetMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RequestPasswordResetMessage.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  resetPassword: {
    path: "/auth.UserService/resetPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetPasswordMessage) => Buffer.from(ResetPasswordMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ResetPasswordMessage.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  requestEmailVerification: {
    path: "/auth.UserService/RequestEmailVerification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmailData) => Buffer.from(EmailData.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmailData.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  verifyEmail: {
    path: "/auth.UserService/VerifyEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest) => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TokenRequest.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  changePassword: handleUnaryCall<ChangePasswordRequest, Status>;
  changeEmail: handleUnaryCall<ChangeEmailRequest, Status>;
  requestPasswordResetToken: handleUnaryCall<RequestPasswordResetMessage, Status>;
  resetPassword: handleUnaryCall<ResetPasswordMessage, Status>;
  requestEmailVerification: handleUnaryCall<EmailData, Status>;
  verifyEmail: handleUnaryCall<TokenRequest, Status>;
}

export interface SessionServiceClient {
  health(request: Empty): Observable<Status>;

  getAllUserSessions(request: IdInput): Observable<SessionList>;

  logoutOtherUserSession(request: IdInput): Observable<Status>;
}

export interface SessionServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  getAllUserSessions(request: IdInput): Promise<SessionList> | Observable<SessionList> | SessionList;

  logoutOtherUserSession(request: IdInput): Promise<Status> | Observable<Status> | Status;
}

export function SessionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "getAllUserSessions", "logoutOtherUserSession"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SESSION_SERVICE_NAME = "SessionService";

export type SessionServiceService = typeof SessionServiceService;
export const SessionServiceService = {
  health: {
    path: "/auth.SessionService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  getAllUserSessions: {
    path: "/auth.SessionService/GetAllUserSessions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IdInput) => Buffer.from(IdInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IdInput.decode(value),
    responseSerialize: (value: SessionList) => Buffer.from(SessionList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SessionList.decode(value),
  },
  logoutOtherUserSession: {
    path: "/auth.SessionService/LogoutOtherUserSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IdInput) => Buffer.from(IdInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IdInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface SessionServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  getAllUserSessions: handleUnaryCall<IdInput, SessionList>;
  logoutOtherUserSession: handleUnaryCall<IdInput, Status>;
}

export interface RoleServiceClient {
  health(request: Empty): Observable<Status>;

  create(request: CreateRoleInput): Observable<RoleData>;

  update(request: UpdateRoleInput): Observable<Status>;

  find(request: IdInput): Observable<RoleData>;

  list(request: Empty): Observable<RoleList>;

  delete(request: IdInput): Observable<Status>;
}

export interface RoleServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  create(request: CreateRoleInput): Promise<RoleData> | Observable<RoleData> | RoleData;

  update(request: UpdateRoleInput): Promise<Status> | Observable<Status> | Status;

  find(request: IdInput): Promise<RoleData> | Observable<RoleData> | RoleData;

  list(request: Empty): Promise<RoleList> | Observable<RoleList> | RoleList;

  delete(request: IdInput): Promise<Status> | Observable<Status> | Status;
}

export function RoleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "create", "update", "find", "list", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROLE_SERVICE_NAME = "RoleService";

export type RoleServiceService = typeof RoleServiceService;
export const RoleServiceService = {
  health: {
    path: "/auth.RoleService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  create: {
    path: "/auth.RoleService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateRoleInput) => Buffer.from(CreateRoleInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateRoleInput.decode(value),
    responseSerialize: (value: RoleData) => Buffer.from(RoleData.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RoleData.decode(value),
  },
  update: {
    path: "/auth.RoleService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateRoleInput) => Buffer.from(UpdateRoleInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateRoleInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  find: {
    path: "/auth.RoleService/Find",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IdInput) => Buffer.from(IdInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IdInput.decode(value),
    responseSerialize: (value: RoleData) => Buffer.from(RoleData.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RoleData.decode(value),
  },
  list: {
    path: "/auth.RoleService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: RoleList) => Buffer.from(RoleList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RoleList.decode(value),
  },
  delete: {
    path: "/auth.RoleService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IdInput) => Buffer.from(IdInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IdInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface RoleServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  create: handleUnaryCall<CreateRoleInput, RoleData>;
  update: handleUnaryCall<UpdateRoleInput, Status>;
  find: handleUnaryCall<IdInput, RoleData>;
  list: handleUnaryCall<Empty, RoleList>;
  delete: handleUnaryCall<IdInput, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
