// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.21.12
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "product";

export interface Status {
  success: boolean;
}

export interface Id {
  id: string;
}

export interface Name {
  name: string;
}

export interface CreateAttributeInput {
  variantId: string;
  key: string;
  value: string;
  /** Optional, if the attribute is store-specific */
  storeId?: string | undefined;
}

export interface FindAttributeInput {
  variantId?: string | undefined;
  orderBy?:
    | AttributeOrderBy
    | undefined;
  /** Number of items to skip for pagination */
  skip?: number | undefined;
  take?: number | undefined;
}

export interface AttributeOrderBy {
  /** Sort by key */
  key?:
    | string
    | undefined;
  /** Sort by value */
  value?:
    | string
    | undefined;
  /** Sort by value */
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface UpdateAttributeInput {
  id: string;
  key?: string | undefined;
  value?: string | undefined;
}

export interface Attribute {
  id: string;
  name: string;
  value: string;
  variantId: string;
}

export interface AttributeList {
  attributes: Attribute[];
}

export interface CreateCategoryInput {
  name: string;
  description: string;
}

export interface FindCategoryInput {
  orderBy?:
    | CategoryOrderBy
    | undefined;
  /** Number of items to skip for pagination */
  skip?: number | undefined;
  take?: number | undefined;
}

export interface CategoryOrderBy {
  /** Sort by key */
  name?:
    | string
    | undefined;
  /** Sort by value */
  createdAt?:
    | string
    | undefined;
  /** Sort by value */
  updatedAt?: string | undefined;
}

export interface UpdateCategoryInput {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface CategoryList {
  categories: Category[];
}

export interface CreateProductInput {
  name: string;
  description: string;
  storeId: string;
  categoryId: string;
  tags: string[];
  /** IDs of attributes associated with the product */
  variant?: ProductVariantInput | undefined;
}

export interface ProductVariantInput {
  sku: string;
  price: number;
  stock: number;
  attributes: VariantAttributeInput[];
}

export interface VariantAttributeInput {
  key: string;
  value: string;
}

export interface UpdateProductInput {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface ProductStore {
  id: string;
  name: string;
}

export interface ProductCategory {
  id: string;
  name: string;
}

export interface ProductVariant {
  id: string;
  name: string;
  description: string;
  /** Attributes associated with the variant */
  attributes: Attribute[];
}

export interface Product {
  id: string;
  name: string;
  description: string;
  /** ID of the category this product belongs to */
  categoryId: string;
  /** ID of the store this product belongs to */
  storeId: string;
  createdAt: string;
  updatedAt: string;
  variants: ProductVariant[];
}

export interface ProductWithRelationships {
  id: string;
  name: string;
  description: string;
  store:
    | ProductStore
    | undefined;
  /** Category of the product */
  category:
    | ProductCategory
    | undefined;
  /** Attributes associated with the product */
  variants: ProductVariant[];
  createdAt: string;
  updatedAt: string;
}

export interface ProductList {
  products: Product[];
}

export interface CreateVariantInput {
  productId: string;
  sku: string;
  price: number;
  stock: number;
}

export interface UpdateVariantInput {
  id: string;
  sku?: string | undefined;
  price?: number | undefined;
}

export interface Variant {
  id: string;
  productId: string;
  sku: string;
  price: number;
  stock: number;
  attributes: Attribute[];
  createdAt: string;
  updatedAt: string;
}

export interface VariantId {
  id: string;
}

export interface VariantList {
  variants: Variant[];
}

export const PRODUCT_PACKAGE_NAME = "product";

function createBaseStatus(): Status {
  return { success: false };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseId(): Id {
  return { id: "" };
}

export const Id: MessageFns<Id> = {
  encode(message: Id, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Id {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseName(): Name {
  return { name: "" };
}

export const Name: MessageFns<Name> = {
  encode(message: Name, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Name {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateAttributeInput(): CreateAttributeInput {
  return { variantId: "", key: "", value: "" };
}

export const CreateAttributeInput: MessageFns<CreateAttributeInput> = {
  encode(message: CreateAttributeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.variantId !== "") {
      writer.uint32(10).string(message.variantId);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.storeId !== undefined) {
      writer.uint32(34).string(message.storeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAttributeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAttributeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.variantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFindAttributeInput(): FindAttributeInput {
  return {};
}

export const FindAttributeInput: MessageFns<FindAttributeInput> = {
  encode(message: FindAttributeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.variantId !== undefined) {
      writer.uint32(10).string(message.variantId);
    }
    if (message.orderBy !== undefined) {
      AttributeOrderBy.encode(message.orderBy, writer.uint32(18).fork()).join();
    }
    if (message.skip !== undefined) {
      writer.uint32(24).int32(message.skip);
    }
    if (message.take !== undefined) {
      writer.uint32(32).int32(message.take);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindAttributeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindAttributeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.variantId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderBy = AttributeOrderBy.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.skip = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.take = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAttributeOrderBy(): AttributeOrderBy {
  return {};
}

export const AttributeOrderBy: MessageFns<AttributeOrderBy> = {
  encode(message: AttributeOrderBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      writer.uint32(18).string(message.value);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(34).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeOrderBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeOrderBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateAttributeInput(): UpdateAttributeInput {
  return { id: "" };
}

export const UpdateAttributeInput: MessageFns<UpdateAttributeInput> = {
  encode(message: UpdateAttributeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== undefined) {
      writer.uint32(18).string(message.key);
    }
    if (message.value !== undefined) {
      writer.uint32(26).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAttributeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAttributeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAttribute(): Attribute {
  return { id: "", name: "", value: "", variantId: "" };
}

export const Attribute: MessageFns<Attribute> = {
  encode(message: Attribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.variantId !== "") {
      writer.uint32(34).string(message.variantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.variantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAttributeList(): AttributeList {
  return { attributes: [] };
}

export const AttributeList: MessageFns<AttributeList> = {
  encode(message: AttributeList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateCategoryInput(): CreateCategoryInput {
  return { name: "", description: "" };
}

export const CreateCategoryInput: MessageFns<CreateCategoryInput> = {
  encode(message: CreateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFindCategoryInput(): FindCategoryInput {
  return {};
}

export const FindCategoryInput: MessageFns<FindCategoryInput> = {
  encode(message: FindCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderBy !== undefined) {
      CategoryOrderBy.encode(message.orderBy, writer.uint32(10).fork()).join();
    }
    if (message.skip !== undefined) {
      writer.uint32(16).int32(message.skip);
    }
    if (message.take !== undefined) {
      writer.uint32(24).int32(message.take);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderBy = CategoryOrderBy.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.skip = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.take = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategoryOrderBy(): CategoryOrderBy {
  return {};
}

export const CategoryOrderBy: MessageFns<CategoryOrderBy> = {
  encode(message: CategoryOrderBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(18).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(26).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryOrderBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryOrderBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateCategoryInput(): UpdateCategoryInput {
  return { id: "" };
}

export const UpdateCategoryInput: MessageFns<UpdateCategoryInput> = {
  encode(message: UpdateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategory(): Category {
  return { id: "", name: "", description: "" };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategoryList(): CategoryList {
  return { categories: [] };
}

export const CategoryList: MessageFns<CategoryList> = {
  encode(message: CategoryList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateProductInput(): CreateProductInput {
  return { name: "", description: "", storeId: "", categoryId: "", tags: [] };
}

export const CreateProductInput: MessageFns<CreateProductInput> = {
  encode(message: CreateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.storeId !== "") {
      writer.uint32(26).string(message.storeId);
    }
    if (message.categoryId !== "") {
      writer.uint32(34).string(message.categoryId);
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    if (message.variant !== undefined) {
      ProductVariantInput.encode(message.variant, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.variant = ProductVariantInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductVariantInput(): ProductVariantInput {
  return { sku: "", price: 0, stock: 0, attributes: [] };
}

export const ProductVariantInput: MessageFns<ProductVariantInput> = {
  encode(message: ProductVariantInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(16).int32(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(24).int32(message.stock);
    }
    for (const v of message.attributes) {
      VariantAttributeInput.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductVariantInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductVariantInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attributes.push(VariantAttributeInput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseVariantAttributeInput(): VariantAttributeInput {
  return { key: "", value: "" };
}

export const VariantAttributeInput: MessageFns<VariantAttributeInput> = {
  encode(message: VariantAttributeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VariantAttributeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantAttributeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateProductInput(): UpdateProductInput {
  return { id: "" };
}

export const UpdateProductInput: MessageFns<UpdateProductInput> = {
  encode(message: UpdateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductStore(): ProductStore {
  return { id: "", name: "" };
}

export const ProductStore: MessageFns<ProductStore> = {
  encode(message: ProductStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductCategory(): ProductCategory {
  return { id: "", name: "" };
}

export const ProductCategory: MessageFns<ProductCategory> = {
  encode(message: ProductCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductVariant(): ProductVariant {
  return { id: "", name: "", description: "", attributes: [] };
}

export const ProductVariant: MessageFns<ProductVariant> = {
  encode(message: ProductVariant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductVariant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductVariant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProduct(): Product {
  return { id: "", name: "", description: "", categoryId: "", storeId: "", createdAt: "", updatedAt: "", variants: [] };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.categoryId !== "") {
      writer.uint32(34).string(message.categoryId);
    }
    if (message.storeId !== "") {
      writer.uint32(42).string(message.storeId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    for (const v of message.variants) {
      ProductVariant.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.variants.push(ProductVariant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductWithRelationships(): ProductWithRelationships {
  return {
    id: "",
    name: "",
    description: "",
    store: undefined,
    category: undefined,
    variants: [],
    createdAt: "",
    updatedAt: "",
  };
}

export const ProductWithRelationships: MessageFns<ProductWithRelationships> = {
  encode(message: ProductWithRelationships, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.store !== undefined) {
      ProductStore.encode(message.store, writer.uint32(34).fork()).join();
    }
    if (message.category !== undefined) {
      ProductCategory.encode(message.category, writer.uint32(42).fork()).join();
    }
    for (const v of message.variants) {
      ProductVariant.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductWithRelationships {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductWithRelationships();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.store = ProductStore.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.category = ProductCategory.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.variants.push(ProductVariant.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductList(): ProductList {
  return { products: [] };
}

export const ProductList: MessageFns<ProductList> = {
  encode(message: ProductList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateVariantInput(): CreateVariantInput {
  return { productId: "", sku: "", price: 0, stock: 0 };
}

export const CreateVariantInput: MessageFns<CreateVariantInput> = {
  encode(message: CreateVariantInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.sku !== "") {
      writer.uint32(18).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(32).int32(message.stock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVariantInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVariantInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateVariantInput(): UpdateVariantInput {
  return { id: "" };
}

export const UpdateVariantInput: MessageFns<UpdateVariantInput> = {
  encode(message: UpdateVariantInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.sku !== undefined) {
      writer.uint32(18).string(message.sku);
    }
    if (message.price !== undefined) {
      writer.uint32(24).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVariantInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVariantInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseVariant(): Variant {
  return { id: "", productId: "", sku: "", price: 0, stock: 0, attributes: [], createdAt: "", updatedAt: "" };
}

export const Variant: MessageFns<Variant> = {
  encode(message: Variant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.sku !== "") {
      writer.uint32(26).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(40).int32(message.stock);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Variant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseVariantId(): VariantId {
  return { id: "" };
}

export const VariantId: MessageFns<VariantId> = {
  encode(message: VariantId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VariantId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseVariantList(): VariantList {
  return { variants: [] };
}

export const VariantList: MessageFns<VariantList> = {
  encode(message: VariantList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.variants) {
      Variant.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VariantList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariantList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.variants.push(Variant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface AttributeServiceClient {
  create(request: CreateAttributeInput): Observable<Attribute>;

  get(request: Id): Observable<Attribute>;

  list(request: FindAttributeInput): Observable<AttributeList>;

  update(request: UpdateAttributeInput): Observable<Attribute>;

  delete(request: Id): Observable<Status>;
}

export interface AttributeServiceController {
  create(request: CreateAttributeInput): Promise<Attribute> | Observable<Attribute> | Attribute;

  get(request: Id): Promise<Attribute> | Observable<Attribute> | Attribute;

  list(request: FindAttributeInput): Promise<AttributeList> | Observable<AttributeList> | AttributeList;

  update(request: UpdateAttributeInput): Promise<Attribute> | Observable<Attribute> | Attribute;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function AttributeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "get", "list", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AttributeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AttributeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ATTRIBUTE_SERVICE_NAME = "AttributeService";

export type AttributeServiceService = typeof AttributeServiceService;
export const AttributeServiceService = {
  create: {
    path: "/product.AttributeService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAttributeInput) => Buffer.from(CreateAttributeInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateAttributeInput.decode(value),
    responseSerialize: (value: Attribute) => Buffer.from(Attribute.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Attribute.decode(value),
  },
  get: {
    path: "/product.AttributeService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Attribute) => Buffer.from(Attribute.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Attribute.decode(value),
  },
  list: {
    path: "/product.AttributeService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindAttributeInput) => Buffer.from(FindAttributeInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindAttributeInput.decode(value),
    responseSerialize: (value: AttributeList) => Buffer.from(AttributeList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AttributeList.decode(value),
  },
  update: {
    path: "/product.AttributeService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAttributeInput) => Buffer.from(UpdateAttributeInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAttributeInput.decode(value),
    responseSerialize: (value: Attribute) => Buffer.from(Attribute.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Attribute.decode(value),
  },
  delete: {
    path: "/product.AttributeService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface AttributeServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateAttributeInput, Attribute>;
  get: handleUnaryCall<Id, Attribute>;
  list: handleUnaryCall<FindAttributeInput, AttributeList>;
  update: handleUnaryCall<UpdateAttributeInput, Attribute>;
  delete: handleUnaryCall<Id, Status>;
}

export interface CategoryServiceClient {
  create(request: CreateCategoryInput): Observable<Category>;

  getById(request: Id): Observable<Category>;

  getByName(request: Name): Observable<Category>;

  list(request: FindCategoryInput): Observable<CategoryList>;

  update(request: UpdateCategoryInput): Observable<Category>;

  delete(request: Id): Observable<Status>;
}

export interface CategoryServiceController {
  create(request: CreateCategoryInput): Promise<Category> | Observable<Category> | Category;

  getById(request: Id): Promise<Category> | Observable<Category> | Category;

  getByName(request: Name): Promise<Category> | Observable<Category> | Category;

  list(request: FindCategoryInput): Promise<CategoryList> | Observable<CategoryList> | CategoryList;

  update(request: UpdateCategoryInput): Promise<Category> | Observable<Category> | Category;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "getById", "getByName", "list", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";

export type CategoryServiceService = typeof CategoryServiceService;
export const CategoryServiceService = {
  create: {
    path: "/product.CategoryService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCategoryInput) => Buffer.from(CreateCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateCategoryInput.decode(value),
    responseSerialize: (value: Category) => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Category.decode(value),
  },
  getById: {
    path: "/product.CategoryService/GetById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Category) => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Category.decode(value),
  },
  getByName: {
    path: "/product.CategoryService/GetByName",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Name) => Buffer.from(Name.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Name.decode(value),
    responseSerialize: (value: Category) => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Category.decode(value),
  },
  list: {
    path: "/product.CategoryService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindCategoryInput) => Buffer.from(FindCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindCategoryInput.decode(value),
    responseSerialize: (value: CategoryList) => Buffer.from(CategoryList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CategoryList.decode(value),
  },
  update: {
    path: "/product.CategoryService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCategoryInput) => Buffer.from(UpdateCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateCategoryInput.decode(value),
    responseSerialize: (value: Category) => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Category.decode(value),
  },
  delete: {
    path: "/product.CategoryService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface CategoryServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateCategoryInput, Category>;
  getById: handleUnaryCall<Id, Category>;
  getByName: handleUnaryCall<Name, Category>;
  list: handleUnaryCall<FindCategoryInput, CategoryList>;
  update: handleUnaryCall<UpdateCategoryInput, Category>;
  delete: handleUnaryCall<Id, Status>;
}

export interface ProductServiceClient {
  create(request: CreateProductInput): Observable<Status>;

  get(request: Id): Observable<Product>;

  getStoreProducts(request: Id): Observable<ProductList>;

  getCategoryProducts(request: Id): Observable<ProductList>;

  list(request: Empty): Observable<ProductList>;

  update(request: UpdateProductInput): Observable<Status>;

  delete(request: Id): Observable<Status>;
}

export interface ProductServiceController {
  create(request: CreateProductInput): Promise<Status> | Observable<Status> | Status;

  get(request: Id): Promise<Product> | Observable<Product> | Product;

  getStoreProducts(request: Id): Promise<ProductList> | Observable<ProductList> | ProductList;

  getCategoryProducts(request: Id): Promise<ProductList> | Observable<ProductList> | ProductList;

  list(request: Empty): Promise<ProductList> | Observable<ProductList> | ProductList;

  update(request: UpdateProductInput): Promise<Status> | Observable<Status> | Status;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "create",
      "get",
      "getStoreProducts",
      "getCategoryProducts",
      "list",
      "update",
      "delete",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";

export type ProductServiceService = typeof ProductServiceService;
export const ProductServiceService = {
  create: {
    path: "/product.ProductService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateProductInput) => Buffer.from(CreateProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateProductInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  get: {
    path: "/product.ProductService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Product) => Buffer.from(Product.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Product.decode(value),
  },
  getStoreProducts: {
    path: "/product.ProductService/GetStoreProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: ProductList) => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProductList.decode(value),
  },
  getCategoryProducts: {
    path: "/product.ProductService/GetCategoryProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: ProductList) => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProductList.decode(value),
  },
  list: {
    path: "/product.ProductService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: ProductList) => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProductList.decode(value),
  },
  update: {
    path: "/product.ProductService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProductInput) => Buffer.from(UpdateProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateProductInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  delete: {
    path: "/product.ProductService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface ProductServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateProductInput, Status>;
  get: handleUnaryCall<Id, Product>;
  getStoreProducts: handleUnaryCall<Id, ProductList>;
  getCategoryProducts: handleUnaryCall<Id, ProductList>;
  list: handleUnaryCall<Empty, ProductList>;
  update: handleUnaryCall<UpdateProductInput, Status>;
  delete: handleUnaryCall<Id, Status>;
}

export interface VariantServiceClient {
  create(request: CreateVariantInput): Observable<Status>;

  get(request: Id): Observable<Variant>;

  getProductVariants(request: Id): Observable<VariantList>;

  list(request: Empty): Observable<VariantList>;

  update(request: UpdateVariantInput): Observable<Status>;

  delete(request: VariantId): Observable<Status>;
}

export interface VariantServiceController {
  create(request: CreateVariantInput): Promise<Status> | Observable<Status> | Status;

  get(request: Id): Promise<Variant> | Observable<Variant> | Variant;

  getProductVariants(request: Id): Promise<VariantList> | Observable<VariantList> | VariantList;

  list(request: Empty): Promise<VariantList> | Observable<VariantList> | VariantList;

  update(request: UpdateVariantInput): Promise<Status> | Observable<Status> | Status;

  delete(request: VariantId): Promise<Status> | Observable<Status> | Status;
}

export function VariantServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "get", "getProductVariants", "list", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VariantService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VariantService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VARIANT_SERVICE_NAME = "VariantService";

export type VariantServiceService = typeof VariantServiceService;
export const VariantServiceService = {
  create: {
    path: "/product.VariantService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateVariantInput) => Buffer.from(CreateVariantInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateVariantInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  get: {
    path: "/product.VariantService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: Variant) => Buffer.from(Variant.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Variant.decode(value),
  },
  getProductVariants: {
    path: "/product.VariantService/GetProductVariants",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id) => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Id.decode(value),
    responseSerialize: (value: VariantList) => Buffer.from(VariantList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => VariantList.decode(value),
  },
  list: {
    path: "/product.VariantService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: VariantList) => Buffer.from(VariantList.encode(value).finish()),
    responseDeserialize: (value: Buffer) => VariantList.decode(value),
  },
  update: {
    path: "/product.VariantService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateVariantInput) => Buffer.from(UpdateVariantInput.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateVariantInput.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
  delete: {
    path: "/product.VariantService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VariantId) => Buffer.from(VariantId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => VariantId.decode(value),
    responseSerialize: (value: Status) => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Status.decode(value),
  },
} as const;

export interface VariantServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateVariantInput, Status>;
  get: handleUnaryCall<Id, Variant>;
  getProductVariants: handleUnaryCall<Id, VariantList>;
  list: handleUnaryCall<Empty, VariantList>;
  update: handleUnaryCall<UpdateVariantInput, Status>;
  delete: handleUnaryCall<VariantId, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
